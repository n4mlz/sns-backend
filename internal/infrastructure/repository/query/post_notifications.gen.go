// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/n4mlz/sns-backend/internal/infrastructure/repository/model"
)

func newPostNotification(db *gorm.DB, opts ...gen.DOOption) postNotification {
	_postNotification := postNotification{}

	_postNotification.postNotificationDo.UseDB(db, opts...)
	_postNotification.postNotificationDo.UseModel(&model.PostNotification{})

	tableName := _postNotification.postNotificationDo.TableName()
	_postNotification.ALL = field.NewAsterisk(tableName)
	_postNotification.ID = field.NewString(tableName, "id")
	_postNotification.Confirmed = field.NewBool(tableName, "confirmed")
	_postNotification.UserID = field.NewString(tableName, "user_id")
	_postNotification.CommentID = field.NewString(tableName, "comment_id")
	_postNotification.ReplyID = field.NewString(tableName, "reply_id")

	_postNotification.fillFieldMap()

	return _postNotification
}

type postNotification struct {
	postNotificationDo

	ALL       field.Asterisk
	ID        field.String
	Confirmed field.Bool
	UserID    field.String
	CommentID field.String
	ReplyID   field.String

	fieldMap map[string]field.Expr
}

func (p postNotification) Table(newTableName string) *postNotification {
	p.postNotificationDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p postNotification) As(alias string) *postNotification {
	p.postNotificationDo.DO = *(p.postNotificationDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *postNotification) updateTableName(table string) *postNotification {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.Confirmed = field.NewBool(table, "confirmed")
	p.UserID = field.NewString(table, "user_id")
	p.CommentID = field.NewString(table, "comment_id")
	p.ReplyID = field.NewString(table, "reply_id")

	p.fillFieldMap()

	return p
}

func (p *postNotification) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *postNotification) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["id"] = p.ID
	p.fieldMap["confirmed"] = p.Confirmed
	p.fieldMap["user_id"] = p.UserID
	p.fieldMap["comment_id"] = p.CommentID
	p.fieldMap["reply_id"] = p.ReplyID
}

func (p postNotification) clone(db *gorm.DB) postNotification {
	p.postNotificationDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p postNotification) replaceDB(db *gorm.DB) postNotification {
	p.postNotificationDo.ReplaceDB(db)
	return p
}

type postNotificationDo struct{ gen.DO }

type IPostNotificationDo interface {
	gen.SubQuery
	Debug() IPostNotificationDo
	WithContext(ctx context.Context) IPostNotificationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPostNotificationDo
	WriteDB() IPostNotificationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPostNotificationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPostNotificationDo
	Not(conds ...gen.Condition) IPostNotificationDo
	Or(conds ...gen.Condition) IPostNotificationDo
	Select(conds ...field.Expr) IPostNotificationDo
	Where(conds ...gen.Condition) IPostNotificationDo
	Order(conds ...field.Expr) IPostNotificationDo
	Distinct(cols ...field.Expr) IPostNotificationDo
	Omit(cols ...field.Expr) IPostNotificationDo
	Join(table schema.Tabler, on ...field.Expr) IPostNotificationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPostNotificationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPostNotificationDo
	Group(cols ...field.Expr) IPostNotificationDo
	Having(conds ...gen.Condition) IPostNotificationDo
	Limit(limit int) IPostNotificationDo
	Offset(offset int) IPostNotificationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPostNotificationDo
	Unscoped() IPostNotificationDo
	Create(values ...*model.PostNotification) error
	CreateInBatches(values []*model.PostNotification, batchSize int) error
	Save(values ...*model.PostNotification) error
	First() (*model.PostNotification, error)
	Take() (*model.PostNotification, error)
	Last() (*model.PostNotification, error)
	Find() ([]*model.PostNotification, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PostNotification, err error)
	FindInBatches(result *[]*model.PostNotification, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PostNotification) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPostNotificationDo
	Assign(attrs ...field.AssignExpr) IPostNotificationDo
	Joins(fields ...field.RelationField) IPostNotificationDo
	Preload(fields ...field.RelationField) IPostNotificationDo
	FirstOrInit() (*model.PostNotification, error)
	FirstOrCreate() (*model.PostNotification, error)
	FindByPage(offset int, limit int) (result []*model.PostNotification, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPostNotificationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p postNotificationDo) Debug() IPostNotificationDo {
	return p.withDO(p.DO.Debug())
}

func (p postNotificationDo) WithContext(ctx context.Context) IPostNotificationDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p postNotificationDo) ReadDB() IPostNotificationDo {
	return p.Clauses(dbresolver.Read)
}

func (p postNotificationDo) WriteDB() IPostNotificationDo {
	return p.Clauses(dbresolver.Write)
}

func (p postNotificationDo) Session(config *gorm.Session) IPostNotificationDo {
	return p.withDO(p.DO.Session(config))
}

func (p postNotificationDo) Clauses(conds ...clause.Expression) IPostNotificationDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p postNotificationDo) Returning(value interface{}, columns ...string) IPostNotificationDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p postNotificationDo) Not(conds ...gen.Condition) IPostNotificationDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p postNotificationDo) Or(conds ...gen.Condition) IPostNotificationDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p postNotificationDo) Select(conds ...field.Expr) IPostNotificationDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p postNotificationDo) Where(conds ...gen.Condition) IPostNotificationDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p postNotificationDo) Order(conds ...field.Expr) IPostNotificationDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p postNotificationDo) Distinct(cols ...field.Expr) IPostNotificationDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p postNotificationDo) Omit(cols ...field.Expr) IPostNotificationDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p postNotificationDo) Join(table schema.Tabler, on ...field.Expr) IPostNotificationDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p postNotificationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPostNotificationDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p postNotificationDo) RightJoin(table schema.Tabler, on ...field.Expr) IPostNotificationDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p postNotificationDo) Group(cols ...field.Expr) IPostNotificationDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p postNotificationDo) Having(conds ...gen.Condition) IPostNotificationDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p postNotificationDo) Limit(limit int) IPostNotificationDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p postNotificationDo) Offset(offset int) IPostNotificationDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p postNotificationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPostNotificationDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p postNotificationDo) Unscoped() IPostNotificationDo {
	return p.withDO(p.DO.Unscoped())
}

func (p postNotificationDo) Create(values ...*model.PostNotification) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p postNotificationDo) CreateInBatches(values []*model.PostNotification, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p postNotificationDo) Save(values ...*model.PostNotification) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p postNotificationDo) First() (*model.PostNotification, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PostNotification), nil
	}
}

func (p postNotificationDo) Take() (*model.PostNotification, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PostNotification), nil
	}
}

func (p postNotificationDo) Last() (*model.PostNotification, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PostNotification), nil
	}
}

func (p postNotificationDo) Find() ([]*model.PostNotification, error) {
	result, err := p.DO.Find()
	return result.([]*model.PostNotification), err
}

func (p postNotificationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PostNotification, err error) {
	buf := make([]*model.PostNotification, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p postNotificationDo) FindInBatches(result *[]*model.PostNotification, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p postNotificationDo) Attrs(attrs ...field.AssignExpr) IPostNotificationDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p postNotificationDo) Assign(attrs ...field.AssignExpr) IPostNotificationDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p postNotificationDo) Joins(fields ...field.RelationField) IPostNotificationDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p postNotificationDo) Preload(fields ...field.RelationField) IPostNotificationDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p postNotificationDo) FirstOrInit() (*model.PostNotification, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PostNotification), nil
	}
}

func (p postNotificationDo) FirstOrCreate() (*model.PostNotification, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PostNotification), nil
	}
}

func (p postNotificationDo) FindByPage(offset int, limit int) (result []*model.PostNotification, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p postNotificationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p postNotificationDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p postNotificationDo) Delete(models ...*model.PostNotification) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *postNotificationDo) withDO(do gen.Dao) *postNotificationDo {
	p.DO = *do.(*gen.DO)
	return p
}
