services:
  backend:
    labels:
      - traefik.enable=true
      - traefik.docker.network=sns-network
      - traefik.http.routers.backend.entryPoints=web
      - traefik.http.services.backend.loadbalancer.server.port=8080
    env_file:
      - .env
      - .env.prod
    build:
      context: .
      dockerfile: prod.Dockerfile
      args:
          FRONTEND_URL: ${FRONTEND_URL}
          DB_USER: ${DB_USER}
          DB_PASSWORD: ${DB_PASSWORD}
          DB_HOST: ${DB_HOST}
          DB_PORT: ${DB_PORT}
          DB_NAME: ${DB_NAME}
          S3_ACCOUNT_ID: ${S3_ACCOUNT_ID}
          S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
          S3_ACCESS_KEY_SECRET: ${S3_ACCESS_KEY_SECRET}
          S3_ENDPOINT: ${S3_ENDPOINT}
          S3_BUCKET_NAME: ${S3_BUCKET_NAME}
          S3_RESOURCE_URL: ${S3_RESOURCE_URL}
    container_name: backend
    tty: true
    depends_on:
      db:
        condition: service_healthy
  db:
    image: mariadb:latest
    container_name: db
    tty: true
    environment:
      MARIADB_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}
      TZ: ${TZ}
    volumes:
      - type: bind
        source: ./sql_init
        target: /docker-entrypoint-initdb.d
      - type: bind
        source: ./sql_data
        target: /var/lib/mysql
    healthcheck:
      test: "mariadb-admin ping -h localhost -u root -p$$MARIADB_ROOT_PASSWORD"
      timeout: 5s
      interval: 5s
      retries: 10
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    tty: true
    volumes:
      - type: bind
        source: ./prometheus
        target: /etc/prometheus
      - type: bind
        source: ./prometheus_data
        target: /prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    user: ":"
    restart: always
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    tty: true
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    ports:
      - ${METRICS_DASHBOARD_PORT}:3000
    volumes:
      - type: bind
        source: ./grafana_data
        target: /var/lib/grafana
    user: ":"
    restart: always
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    tty: true
    restart: always
networks:
  default:
    name: sns-network